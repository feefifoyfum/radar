{"ast":null,"code":"import axios from 'axios';\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const formData = new FormData();\n    formData.append('username', credentials.username);\n    formData.append('password', credentials.password);\n    const response = await api.post('/auth/token', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\n// Users API\nexport const usersAPI = {\n  createUser: async userData => {\n    const response = await api.post('/users/', userData);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  updateUser: async userData => {\n    const response = await api.put('/users/me', userData);\n    return response.data;\n  },\n  deleteUser: async () => {\n    await api.delete('/users/me');\n  },\n  getUser: async userId => {\n    const response = await api.get(`/users/${userId}`);\n    return response.data;\n  }\n};\n\n// Posts API\nexport const postsAPI = {\n  createPostForm: async form => {\n    const response = await api.post('/posts/', form, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  createPost: async postData => {\n    const response = await api.post('/posts/', postData);\n    return response.data;\n  },\n  getPosts: async (skip = 0, limit = 100) => {\n    const response = await api.get(`/posts/?skip=${skip}&limit=${limit}`);\n    return response.data;\n  },\n  getPost: async postId => {\n    const response = await api.get(`/posts/${postId}`);\n    return response.data;\n  },\n  updatePost: async (postId, postData) => {\n    const response = await api.put(`/posts/${postId}`, postData);\n    return response.data;\n  },\n  deletePost: async postId => {\n    await api.delete(`/posts/${postId}`);\n  },\n  getUserPosts: async userId => {\n    const response = await api.get(`/posts/user/${userId}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","login","credentials","formData","FormData","append","username","password","response","post","data","usersAPI","createUser","userData","getCurrentUser","get","updateUser","put","deleteUser","delete","getUser","userId","postsAPI","createPostForm","form","createPost","postData","getPosts","skip","limit","getPost","postId","updatePost","deletePost","getUserPosts"],"sources":["/Users/foyindosunmu/Documents/GitHub/radar/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { User, Post, UserCreate, UserUpdate, PostCreate, PostUpdate, LoginCredentials, AuthResponse } from '../types';\n\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const formData = new FormData();\n    formData.append('username', credentials.username);\n    formData.append('password', credentials.password);\n    \n    const response = await api.post('/auth/token', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n\n// Users API\nexport const usersAPI = {\n  createUser: async (userData: UserCreate): Promise<User> => {\n    const response = await api.post('/users/', userData);\n    return response.data;\n  },\n  \n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  \n  updateUser: async (userData: UserUpdate): Promise<User> => {\n    const response = await api.put('/users/me', userData);\n    return response.data;\n  },\n  \n  deleteUser: async (): Promise<void> => {\n    await api.delete('/users/me');\n  },\n  \n  getUser: async (userId: number): Promise<User> => {\n    const response = await api.get(`/users/${userId}`);\n    return response.data;\n  },\n};\n\n// Posts API\nexport const postsAPI = {\n  createPostForm: async (form: FormData): Promise<Post> => {\n    const response = await api.post('/posts/', form, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    });\n    return response.data;\n  },\n  createPost: async (postData: PostCreate): Promise<Post> => {\n    const response = await api.post('/posts/', postData);\n    return response.data;\n  },\n  \n  getPosts: async (skip = 0, limit = 100): Promise<Post[]> => {\n    const response = await api.get(`/posts/?skip=${skip}&limit=${limit}`);\n    return response.data;\n  },\n  \n  getPost: async (postId: number): Promise<Post> => {\n    const response = await api.get(`/posts/${postId}`);\n    return response.data;\n  },\n  \n  updatePost: async (postId: number, postData: PostUpdate): Promise<Post> => {\n    const response = await api.put(`/posts/${postId}`, postData);\n    return response.data;\n  },\n  \n  deletePost: async (postId: number): Promise<void> => {\n    await api.delete(`/posts/${postId}`);\n  },\n  \n  getUserPosts: async (userId: number): Promise<Post[]> => {\n    const response = await api.get(`/posts/user/${userId}`);\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}